#! /usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const got = require("got");
const fs = require("fs");
const rimraf = require("rimraf");
function getJsonFileList(url) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const response = yield got(url);
            const lines = response.body.split('\n');
            return lines.filter((l) => l.endsWith('.json') && !l.endsWith(" telemetry.json")).map((l) => url + l.split(' ')[2]);
        }
        catch (error) {
            console.error(error.response.body);
            return null;
        }
    });
}
function downloadFile(url) {
    return __awaiter(this, void 0, void 0, function* () {
        const parts = url.split('/');
        const filename = parts[parts.length - 1];
        try {
            console.log('downloading ' + filename);
            const response = yield got(url);
            fs.writeFileSync("./schemas/" + filename, response.body);
            console.log(filename + ' saved');
        }
        catch (error) {
            console.error('Error downloading ' + filename + ': ' + error.response.body);
        }
    });
}
const baseURL = 'https://hg.mozilla.org/integration/autoland/raw-file/tip/';
Promise.all([
    getJsonFileList(baseURL + 'toolkit/components/extensions/schemas/'),
    getJsonFileList(baseURL + 'browser/components/extensions/schemas/')
]).then((result) => {
    const files = result.reduce((dest, files) => files ? dest.concat(files) : dest, []);
    rimraf('./schemas', () => {
        fs.mkdirSync('./schemas');
        Promise.all(files.map(downloadFile)).then((result) => {
            console.log('done');
        });
    });
});
//# sourceMappingURL=fetch.js.map