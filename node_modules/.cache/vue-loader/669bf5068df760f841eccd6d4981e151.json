{"remainingRequest":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ericyang/Desktop/Onchina_item/marketplace-web/src/components/Seller.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/src/components/Seller.vue","mtime":1557224963625},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { client } from 'ontology-dapi'\n\nexport default {\n  data() {\n    return {\n      tableData: [],\n      accountid: ''\n    }\n  },\n  methods: {\n    async toShip(data) {\n      console.log(data)\n      // 构造数据\n      let scriptHash = '472848200412d9a7abbb0ed0bfb568a47745e4ba'\n      let operation = 'sendEncMessage'\n      let gasPrice = 500\n      let gasLimit = 30000\n      let requireIdentity = true\n\n      // 构造args\n      let exchange_id = data.order_id     //   ByteArray\n      console.log(exchange_id)\n      //   exchange_id = client.api.utils.addressToHex(exchange_id)\n\n      let str = 'lijie'\n      str = client.api.utils.strToHex(str)\n      let message_list = [\n        {\n          type: 'ByteArray',\n          value: str\n        }\n      ]\n\n      let args = [\n        {\n          type: 'ByteArray',\n          value: exchange_id\n        },\n        {\n          type: 'Array',\n          value: message_list\n        }\n      ]\n\n\n      const result = await client.api.smartContract.invoke({\n        scriptHash,\n        operation,\n        args,\n        gasPrice,\n        gasLimit,\n        requireIdentity\n      });\n      console.log(result)\n    },\n    indexMethod(index) {\n      return index + 1\n    },\n    async getSellOrder() {\n      try {\n        let res = await this.$http.get(`http://192.168.50.96:10335/api/v1/data-dealer/tools/orders/1?ontid=did:ont:${this.accountid}`)\n        console.log('sellerorder', res)\n        if (res.status === 200 && res.data.desc === 'SUCCESS') {\n          this.tableData = res.data.result\n        }\n      } catch (error) {\n        this.tableData = []\n        console.log(error)\n      }\n    },\n    async collectMoney(data) {\n      // 构造数据\n      let scriptHash = '472848200412d9a7abbb0ed0bfb568a47745e4ba'\n      let operation = 'receiveToken'\n      let gasPrice = 500\n      let gasLimit = 30000\n      let requireIdentity = true\n\n      // 构造args\n      let exchange_id = data.order_id\n      let args = [\n        {\n          type: 'ByteArray',\n          value: exchange_id\n        }\n      ]\n\n      const result = await client.api.smartContract.invoke({\n        scriptHash,\n        operation,\n        args,\n        gasPrice,\n        gasLimit,\n        requireIdentity\n      });\n      console.log(result)\n    }\n  },\n  async  mounted() {\n    this.accountid = await client.api.asset.getAccount()\n    console.log(this.accountid);\n    if (!this.accountid) {\n      return\n    }\n    this.getSellOrder()\n  },\n}\n",{"version":3,"sources":["Seller.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Seller.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <el-table border :data=\"tableData\" style=\"width: 100%\">\n      <el-table-column type=\"index\" :index=\"indexMethod\" align=\"center\"></el-table-column>\n      <el-table-column prop=\"data_demander\" label=\"买家\" style=\"width: 20%\" align=\"center\"></el-table-column>\n      <el-table-column prop=\"order_id\" label=\"订单号\" width=\"260\" align=\"center\"></el-table-column>\n      <el-table-column label=\"订单状态\" align=\"center\" width=\"180\">\n        <template slot-scope=\"scope\">\n          <el-tag size=\"medium\" v-if=\"scope.row.state === 'boughtOnchain'\">待发货</el-tag>\n          <el-tag\n            size=\"medium\"\n            type=\"success\"\n            v-else-if=\"scope.row.state === 'deliveredOnchain'\"\n          >已发货</el-tag>\n          <el-tag\n            size=\"medium\"\n            type=\"warning\"\n            v-else-if=\"scope.row.state === 'buyerRecvMsgOnchain'\"\n          >买家已收货</el-tag>\n          <el-tag\n            size=\"medium\"\n            type=\"danger\"\n            v-else-if=\"scope.row.state === 'sellerRecvTokenOnchain'\"\n          >已收钱</el-tag>\n          <el-tag size=\"medium\" type=\"info\" v-else>订单已取消</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"buy_date\" label=\"购买日期\" width=\"180\" align=\"center\"></el-table-column>\n      <el-table-column label=\"操作\" width=\"180\" align=\"center\">\n        <template slot-scope=\"scope\">\n          <el-button\n            @click=\"toShip(scope.row)\"\n            type=\"primary\"\n            v-if=\"scope.row.state === 'boughtOnchain'\"\n          >立即发货</el-button>\n          <el-button\n            @click=\"collectMoney(scope.row)\"\n            type=\"primary\"\n            v-else-if=\"scope.row.state === 'deliveredOnchain'\"\n          >收钱</el-button>\n          <el-tag\n            size=\"medium\"\n            type=\"info\"\n            v-else-if=\"scope.row.state === 'sellerRecvTokenOnchain'\"\n          >订单已完成</el-tag>\n          <el-tag size=\"medium\" type=\"info\" v-else>订单已取消</el-tag>\n        </template>\n      </el-table-column>\n    </el-table>\n  </div>\n</template>\n\n<script>\nimport { client } from 'ontology-dapi'\n\nexport default {\n  data() {\n    return {\n      tableData: [],\n      accountid: ''\n    }\n  },\n  methods: {\n    async toShip(data) {\n      console.log(data)\n      // 构造数据\n      let scriptHash = '472848200412d9a7abbb0ed0bfb568a47745e4ba'\n      let operation = 'sendEncMessage'\n      let gasPrice = 500\n      let gasLimit = 30000\n      let requireIdentity = true\n\n      // 构造args\n      let exchange_id = data.order_id     //   ByteArray\n      console.log(exchange_id)\n      //   exchange_id = client.api.utils.addressToHex(exchange_id)\n\n      let str = 'lijie'\n      str = client.api.utils.strToHex(str)\n      let message_list = [\n        {\n          type: 'ByteArray',\n          value: str\n        }\n      ]\n\n      let args = [\n        {\n          type: 'ByteArray',\n          value: exchange_id\n        },\n        {\n          type: 'Array',\n          value: message_list\n        }\n      ]\n\n\n      const result = await client.api.smartContract.invoke({\n        scriptHash,\n        operation,\n        args,\n        gasPrice,\n        gasLimit,\n        requireIdentity\n      });\n      console.log(result)\n    },\n    indexMethod(index) {\n      return index + 1\n    },\n    async getSellOrder() {\n      try {\n        let res = await this.$http.get(`http://192.168.50.96:10335/api/v1/data-dealer/tools/orders/1?ontid=did:ont:${this.accountid}`)\n        console.log('sellerorder', res)\n        if (res.status === 200 && res.data.desc === 'SUCCESS') {\n          this.tableData = res.data.result\n        }\n      } catch (error) {\n        this.tableData = []\n        console.log(error)\n      }\n    },\n    async collectMoney(data) {\n      // 构造数据\n      let scriptHash = '472848200412d9a7abbb0ed0bfb568a47745e4ba'\n      let operation = 'receiveToken'\n      let gasPrice = 500\n      let gasLimit = 30000\n      let requireIdentity = true\n\n      // 构造args\n      let exchange_id = data.order_id\n      let args = [\n        {\n          type: 'ByteArray',\n          value: exchange_id\n        }\n      ]\n\n      const result = await client.api.smartContract.invoke({\n        scriptHash,\n        operation,\n        args,\n        gasPrice,\n        gasLimit,\n        requireIdentity\n      });\n      console.log(result)\n    }\n  },\n  async  mounted() {\n    this.accountid = await client.api.asset.getAccount()\n    console.log(this.accountid);\n    if (!this.accountid) {\n      return\n    }\n    this.getSellOrder()\n  },\n}\n</script>\n\n<style>\n</style>\n"]}]}