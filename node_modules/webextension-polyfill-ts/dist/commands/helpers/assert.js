"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorMessage;
(function (ErrorMessage) {
    ErrorMessage["MISSING_NAME"] = "Gotta have a name!";
    ErrorMessage["UNSUPPORTED"] = "Should not happen: unsupported or deprecated";
})(ErrorMessage = exports.ErrorMessage || (exports.ErrorMessage = {}));
;
function getType(json) {
    if (json === null)
        return 'null';
    if (Array.isArray(json))
        return 'array';
    return typeof (json);
}
function assertEqual(a, b) {
    if (a !== b)
        throw new Error(`'${JSON.stringify(a)}' is not ${JSON.stringify(b)}`);
}
exports.assertEqual = assertEqual;
function assertSupported(prop) {
    if (prop.deprecated || prop.unsupported)
        throw ErrorMessage.UNSUPPORTED;
}
exports.assertSupported = assertSupported;
function assertOneOfX(value, validValues) {
    if (validValues.indexOf(value) === -1)
        throw new Error(`'${value}' is not one of ${JSON.stringify(validValues)}`);
}
exports.assertOneOfX = assertOneOfX;
function assertOneOf(value, ...validValues) {
    assertOneOfX(value, validValues);
}
exports.assertOneOf = assertOneOf;
function assertType(json, ...validTypes) {
    assertOneOfX(getType(json), validTypes);
}
exports.assertType = assertType;
function assertArray(json, callback) {
    if (json) {
        for (let i = 0; i < json.length; i++)
            callback(json[i]);
    }
}
exports.assertArray = assertArray;
function assertMap(json, callback) {
    if (json) {
        for (let key in json)
            callback(json[key]);
    }
}
exports.assertMap = assertMap;
function assertValidOjectKeys(json, keys) {
    const names = Object.getOwnPropertyNames(json);
    for (let i = 0; i < names.length; i++)
        assertOneOfX(names[i], keys);
}
exports.assertValidOjectKeys = assertValidOjectKeys;
//# sourceMappingURL=assert.js.map