{"remainingRequest":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/babel-loader/lib/index.js!/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ericyang/Desktop/Onchina_item/marketplace-web/src/components/Seller.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/src/components/Seller.vue","mtime":1557385974608},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { client } from 'ontology-dapi';\nexport default {\n  data: function data() {\n    return {\n      tableData: [],\n      accountid: '',\n      orderCount: 0,\n      pageSize: 2,\n      pageNum: 1\n    };\n  },\n  methods: {\n    toShip: function () {\n      var _toShip = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(data, value) {\n        var operation, exchange_id, str, message_list, args, params, result;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(data); // 构造数据\n\n                operation = 'sendEncMessage'; // 构造args\n\n                exchange_id = data.orderId; //   ByteArray\n\n                console.log(exchange_id);\n                str = value; // 发货的数据\n\n                str = client.api.utils.strToHex(str);\n                message_list = [{\n                  type: 'ByteArray',\n                  value: str\n                }];\n                args = [{\n                  type: 'ByteArray',\n                  value: exchange_id\n                }, {\n                  type: 'Array',\n                  value: message_list\n                }];\n                params = {\n                  operation: operation,\n                  args: args\n                };\n                _context.prev = 9;\n                _context.next = 12;\n                return this.$store.dispatch('dapiInvoke', params);\n\n              case 12:\n                result = _context.sent;\n                console.log(result);\n\n                if (result && result.transaction) {\n                  this.getSellOrder();\n                  this.$message({\n                    message: '发货成功！',\n                    type: 'success',\n                    center: true,\n                    duration: 2000\n                  });\n                } else {\n                  this.$message({\n                    message: '发货失败，请重试！',\n                    type: 'error',\n                    center: true,\n                    duration: 2000\n                  });\n                }\n\n                _context.next = 20;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](9);\n                this.$message({\n                  message: '发货失败，请重试！',\n                  type: 'error',\n                  center: true,\n                  duration: 2000\n                });\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[9, 17]]);\n      }));\n\n      function toShip(_x, _x2) {\n        return _toShip.apply(this, arguments);\n      }\n\n      return toShip;\n    }(),\n    indexMethod: function indexMethod(index) {\n      return (this.pageNum - 1) * this.pageSize + index + 1;\n    },\n    getSellOrder: function () {\n      var _getSellOrder = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return this.$http.get(\"http://192.168.50.96:10335/api/v1/data-dealer/tools/orders/1?ontid=did:ont:\".concat(this.accountid, \"&pageNum=\").concat(this.pageNum, \"&pageSize=\").concat(this.pageSize));\n\n              case 3:\n                res = _context2.sent;\n                console.log('sellerorder', res);\n\n                if (res.status === 200 && res.data.msg === 'SUCCESS') {\n                  this.tableData = res.data.result.list;\n                  this.orderCount = res.data.result.total;\n                }\n\n                _context2.next = 12;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                this.tableData = [];\n                console.log(_context2.t0);\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 8]]);\n      }));\n\n      function getSellOrder() {\n        return _getSellOrder.apply(this, arguments);\n      }\n\n      return getSellOrder;\n    }(),\n    collectMoney: function () {\n      var _collectMoney = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(data) {\n        var operation, exchange_id, args, params, result;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // 构造数据\n                operation = 'receiveToken'; // 构造args\n\n                exchange_id = data.orderId;\n                args = [{\n                  type: 'ByteArray',\n                  value: exchange_id\n                }];\n                params = {\n                  operation: operation,\n                  args: args\n                };\n                console.log(params);\n                _context3.prev = 5;\n                _context3.next = 8;\n                return this.$store.dispatch('dapiInvoke', params);\n\n              case 8:\n                result = _context3.sent;\n                console.log('result', result);\n\n                if (result && result.transaction) {\n                  this.getSellOrder();\n                  this.$message({\n                    message: '收钱成功！',\n                    type: 'success',\n                    center: true,\n                    duration: 2000\n                  });\n                } else {\n                  this.$message({\n                    message: '收钱失败，请重试！',\n                    type: 'error',\n                    center: true,\n                    duration: 2000\n                  });\n                }\n\n                _context3.next = 16;\n                break;\n\n              case 13:\n                _context3.prev = 13;\n                _context3.t0 = _context3[\"catch\"](5);\n                this.$message({\n                  message: '收钱失败，请重试！',\n                  type: 'error',\n                  center: true,\n                  duration: 2000\n                });\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[5, 13]]);\n      }));\n\n      function collectMoney(_x3) {\n        return _collectMoney.apply(this, arguments);\n      }\n\n      return collectMoney;\n    }(),\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.pageNum = val;\n      this.getSellOrder();\n    },\n    openMsgBox: function openMsgBox(data) {\n      var _this = this;\n\n      this.$prompt('请输入内容', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        inputPattern: /\\S/,\n        inputErrorMessage: '内容不能为空'\n      }).then(function (_ref) {\n        var value = _ref.value;\n\n        _this.toShip(data, value);\n      }).catch(function () {});\n    },\n    toAddData: function toAddData() {\n      this.$router.push({\n        path: 'addnewdata'\n      });\n    }\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee4() {\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return client.api.asset.getAccount();\n\n            case 2:\n              this.accountid = _context4.sent;\n              console.log(this.accountid);\n\n              if (this.accountid) {\n                _context4.next = 6;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 6:\n              this.getSellOrder();\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }()\n};",{"version":3,"sources":["Seller.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <el-button style=\"margin-bottom: 20px; float: right;\" @click=\"toAddData()\" type=\"primary\">新增商品</el-button>\n    <el-table border :data=\"tableData\" style=\"width: 100%\">\n      <el-table-column type=\"index\" :index=\"indexMethod\" align=\"center\"></el-table-column>\n      <el-table-column prop=\"dataDemander\" label=\"买家\" style=\"width: 20%\" align=\"center\"></el-table-column>\n      <el-table-column prop=\"orderId\" label=\"订单号\" width=\"260\" align=\"center\"></el-table-column>\n      <el-table-column label=\"订单状态\" align=\"center\" width=\"180\">\n        <template slot-scope=\"scope\">\n          <el-tag size=\"medium\" v-if=\"scope.row.state === 'boughtOnchain'\">待发货</el-tag>\n          <el-tag\n            size=\"medium\"\n            type=\"success\"\n            v-else-if=\"scope.row.state === 'deliveredOnchain'\"\n          >已发货</el-tag>\n          <el-tag\n            size=\"medium\"\n            type=\"warning\"\n            v-else-if=\"scope.row.state === 'buyerRecvMsgOnchain'\"\n          >买家已收货</el-tag>\n          <el-tag\n            size=\"medium\"\n            type=\"danger\"\n            v-else-if=\"scope.row.state === 'sellerRecvTokenOnchain'\"\n          >已收钱</el-tag>\n          <el-tag size=\"medium\" type=\"info\" v-else>订单已取消</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"buyDate\" label=\"购买日期\" width=\"180\" align=\"center\"></el-table-column>\n      <el-table-column label=\"操作\" width=\"180\" align=\"center\">\n        <template slot-scope=\"scope\">\n          <el-button\n            @click=\"collectMoney(scope.row)\"\n            type=\"primary\"\n            v-if=\"scope.row.state === 'deliveredOnchain' && scope.row.isRecvToken === 0\"\n          >收款</el-button>\n          <el-button\n            @click=\"collectMoney(scope.row)\"\n            type=\"primary\"\n            v-else-if=\"scope.row.state === 'buyerRecvMsgOnchain' && scope.row.isRecvToken === 0\"\n          >收款</el-button>\n          <el-tag size=\"medium\" type=\"info\" v-else-if=\"scope.row.isRecvToken === 1\">订单已完成</el-tag>\n          <el-tag\n            size=\"medium\"\n            type=\"danger\"\n            v-else-if=\"scope.row.state === 'buyerCancelOnchain'\"\n          >订单已取消</el-tag>\n          <!-- <el-button @click=\"toShip(scope.row)\" type=\"primary\" v-else>立即发货</el-button> -->\n          <el-button @click=\"openMsgBox(scope.row)\" type=\"primary\" v-else>立即发货</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <div class=\"paginatio\">\n      <el-pagination\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"orderCount\"\n        :page-size=\"pageSize\"\n      ></el-pagination>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { client } from 'ontology-dapi'\n\nexport default {\n  data() {\n    return {\n      tableData: [],\n      accountid: '',\n      orderCount: 0,\n      pageSize: 2,\n      pageNum: 1\n    }\n  },\n  methods: {\n    async toShip(data, value) {\n      console.log(data)\n      // 构造数据\n      let operation = 'sendEncMessage'\n      // 构造args\n      let exchange_id = data.orderId     //   ByteArray\n      console.log(exchange_id)\n\n      let str = value   // 发货的数据\n      str = client.api.utils.strToHex(str)\n      let message_list = [\n        {\n          type: 'ByteArray',\n          value: str\n        }\n      ]\n\n      let args = [\n        {\n          type: 'ByteArray',\n          value: exchange_id\n        },\n        {\n          type: 'Array',\n          value: message_list\n        }\n      ]\n      let params = {\n        operation,\n        args\n      }\n      try {\n        const result = await this.$store.dispatch('dapiInvoke', params)\n        console.log(result)\n        if (result && result.transaction) {\n          this.getSellOrder()\n          this.$message({\n            message: '发货成功！',\n            type: 'success',\n            center: true,\n            duration: 2000\n          });\n        } else {\n          this.$message({\n            message: '发货失败，请重试！',\n            type: 'error',\n            center: true,\n            duration: 2000\n          })\n        }\n      } catch (error) {\n        this.$message({\n          message: '发货失败，请重试！',\n          type: 'error',\n          center: true,\n          duration: 2000\n        })\n      }\n    },\n    indexMethod(index) {\n      return (this.pageNum - 1) * this.pageSize + index + 1\n    },\n    async getSellOrder() {\n      try {\n        let res = await this.$http.get(`http://192.168.50.96:10335/api/v1/data-dealer/tools/orders/1?ontid=did:ont:${this.accountid}&pageNum=${this.pageNum}&pageSize=${this.pageSize}`)\n        console.log('sellerorder', res)\n        if (res.status === 200 && res.data.msg === 'SUCCESS') {\n          this.tableData = res.data.result.list\n          this.orderCount = res.data.result.total\n        }\n      } catch (error) {\n        this.tableData = []\n        console.log(error)\n      }\n    },\n    async collectMoney(data) {\n      // 构造数据\n      let operation = 'receiveToken'\n      // 构造args\n      let exchange_id = data.orderId\n      let args = [\n        {\n          type: 'ByteArray',\n          value: exchange_id\n        }\n      ]\n      let params = {\n        operation,\n        args\n      }\n      console.log(params)\n      try {\n        const result = await this.$store.dispatch('dapiInvoke', params)\n        console.log('result', result)\n\n        if (result && result.transaction) {\n          this.getSellOrder()\n          this.$message({\n            message: '收钱成功！',\n            type: 'success',\n            center: true,\n            duration: 2000\n          });\n        } else {\n          this.$message({\n            message: '收钱失败，请重试！',\n            type: 'error',\n            center: true,\n            duration: 2000\n          })\n        }\n      } catch (error) {\n        this.$message({\n          message: '收钱失败，请重试！',\n          type: 'error',\n          center: true,\n          duration: 2000\n        })\n      }\n\n    },\n    handleCurrentChange(val) {\n      this.pageNum = val\n      this.getSellOrder()\n    },\n    openMsgBox(data) {\n      this.$prompt('请输入内容', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        inputPattern: /\\S/,\n        inputErrorMessage: '内容不能为空'\n      }).then(({ value }) => {\n        this.toShip(data, value)\n      }).catch(() => {\n      });\n    },\n    toAddData() {\n      this.$router.push({ path: 'addnewdata' })\n    }\n  },\n  async  mounted() {\n    this.accountid = await client.api.asset.getAccount()\n    console.log(this.accountid);\n    if (!this.accountid) {\n      return\n    }\n    this.getSellOrder()\n  },\n}\n</script>\n\n<style lang='less' scoped>\n.paginatio {\n  margin: 20px auto;\n}\n</style>\n"],"sourceRoot":"src/components"}]}