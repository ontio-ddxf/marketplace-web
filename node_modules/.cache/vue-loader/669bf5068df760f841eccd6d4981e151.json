{"remainingRequest":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ericyang/Desktop/Onchina_item/marketplace-web/src/components/Seller.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/src/components/Seller.vue","mtime":1557385974608},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { client } from 'ontology-dapi'\n\nexport default {\n  data() {\n    return {\n      tableData: [],\n      accountid: '',\n      orderCount: 0,\n      pageSize: 2,\n      pageNum: 1\n    }\n  },\n  methods: {\n    async toShip(data, value) {\n      console.log(data)\n      // 构造数据\n      let operation = 'sendEncMessage'\n      // 构造args\n      let exchange_id = data.orderId     //   ByteArray\n      console.log(exchange_id)\n\n      let str = value   // 发货的数据\n      str = client.api.utils.strToHex(str)\n      let message_list = [\n        {\n          type: 'ByteArray',\n          value: str\n        }\n      ]\n\n      let args = [\n        {\n          type: 'ByteArray',\n          value: exchange_id\n        },\n        {\n          type: 'Array',\n          value: message_list\n        }\n      ]\n      let params = {\n        operation,\n        args\n      }\n      try {\n        const result = await this.$store.dispatch('dapiInvoke', params)\n        console.log(result)\n        if (result && result.transaction) {\n          this.getSellOrder()\n          this.$message({\n            message: '发货成功！',\n            type: 'success',\n            center: true,\n            duration: 2000\n          });\n        } else {\n          this.$message({\n            message: '发货失败，请重试！',\n            type: 'error',\n            center: true,\n            duration: 2000\n          })\n        }\n      } catch (error) {\n        this.$message({\n          message: '发货失败，请重试！',\n          type: 'error',\n          center: true,\n          duration: 2000\n        })\n      }\n    },\n    indexMethod(index) {\n      return (this.pageNum - 1) * this.pageSize + index + 1\n    },\n    async getSellOrder() {\n      try {\n        let res = await this.$http.get(`http://192.168.50.96:10335/api/v1/data-dealer/tools/orders/1?ontid=did:ont:${this.accountid}&pageNum=${this.pageNum}&pageSize=${this.pageSize}`)\n        console.log('sellerorder', res)\n        if (res.status === 200 && res.data.msg === 'SUCCESS') {\n          this.tableData = res.data.result.list\n          this.orderCount = res.data.result.total\n        }\n      } catch (error) {\n        this.tableData = []\n        console.log(error)\n      }\n    },\n    async collectMoney(data) {\n      // 构造数据\n      let operation = 'receiveToken'\n      // 构造args\n      let exchange_id = data.orderId\n      let args = [\n        {\n          type: 'ByteArray',\n          value: exchange_id\n        }\n      ]\n      let params = {\n        operation,\n        args\n      }\n      console.log(params)\n      try {\n        const result = await this.$store.dispatch('dapiInvoke', params)\n        console.log('result', result)\n\n        if (result && result.transaction) {\n          this.getSellOrder()\n          this.$message({\n            message: '收钱成功！',\n            type: 'success',\n            center: true,\n            duration: 2000\n          });\n        } else {\n          this.$message({\n            message: '收钱失败，请重试！',\n            type: 'error',\n            center: true,\n            duration: 2000\n          })\n        }\n      } catch (error) {\n        this.$message({\n          message: '收钱失败，请重试！',\n          type: 'error',\n          center: true,\n          duration: 2000\n        })\n      }\n\n    },\n    handleCurrentChange(val) {\n      this.pageNum = val\n      this.getSellOrder()\n    },\n    openMsgBox(data) {\n      this.$prompt('请输入内容', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        inputPattern: /\\S/,\n        inputErrorMessage: '内容不能为空'\n      }).then(({ value }) => {\n        this.toShip(data, value)\n      }).catch(() => {\n      });\n    },\n    toAddData() {\n      this.$router.push({ path: 'addnewdata' })\n    }\n  },\n  async  mounted() {\n    this.accountid = await client.api.asset.getAccount()\n    console.log(this.accountid);\n    if (!this.accountid) {\n      return\n    }\n    this.getSellOrder()\n  },\n}\n",{"version":3,"sources":["Seller.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Seller.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <el-button style=\"margin-bottom: 20px; float: right;\" @click=\"toAddData()\" type=\"primary\">新增商品</el-button>\n    <el-table border :data=\"tableData\" style=\"width: 100%\">\n      <el-table-column type=\"index\" :index=\"indexMethod\" align=\"center\"></el-table-column>\n      <el-table-column prop=\"dataDemander\" label=\"买家\" style=\"width: 20%\" align=\"center\"></el-table-column>\n      <el-table-column prop=\"orderId\" label=\"订单号\" width=\"260\" align=\"center\"></el-table-column>\n      <el-table-column label=\"订单状态\" align=\"center\" width=\"180\">\n        <template slot-scope=\"scope\">\n          <el-tag size=\"medium\" v-if=\"scope.row.state === 'boughtOnchain'\">待发货</el-tag>\n          <el-tag\n            size=\"medium\"\n            type=\"success\"\n            v-else-if=\"scope.row.state === 'deliveredOnchain'\"\n          >已发货</el-tag>\n          <el-tag\n            size=\"medium\"\n            type=\"warning\"\n            v-else-if=\"scope.row.state === 'buyerRecvMsgOnchain'\"\n          >买家已收货</el-tag>\n          <el-tag\n            size=\"medium\"\n            type=\"danger\"\n            v-else-if=\"scope.row.state === 'sellerRecvTokenOnchain'\"\n          >已收钱</el-tag>\n          <el-tag size=\"medium\" type=\"info\" v-else>订单已取消</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"buyDate\" label=\"购买日期\" width=\"180\" align=\"center\"></el-table-column>\n      <el-table-column label=\"操作\" width=\"180\" align=\"center\">\n        <template slot-scope=\"scope\">\n          <el-button\n            @click=\"collectMoney(scope.row)\"\n            type=\"primary\"\n            v-if=\"scope.row.state === 'deliveredOnchain' && scope.row.isRecvToken === 0\"\n          >收款</el-button>\n          <el-button\n            @click=\"collectMoney(scope.row)\"\n            type=\"primary\"\n            v-else-if=\"scope.row.state === 'buyerRecvMsgOnchain' && scope.row.isRecvToken === 0\"\n          >收款</el-button>\n          <el-tag size=\"medium\" type=\"info\" v-else-if=\"scope.row.isRecvToken === 1\">订单已完成</el-tag>\n          <el-tag\n            size=\"medium\"\n            type=\"danger\"\n            v-else-if=\"scope.row.state === 'buyerCancelOnchain'\"\n          >订单已取消</el-tag>\n          <!-- <el-button @click=\"toShip(scope.row)\" type=\"primary\" v-else>立即发货</el-button> -->\n          <el-button @click=\"openMsgBox(scope.row)\" type=\"primary\" v-else>立即发货</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <div class=\"paginatio\">\n      <el-pagination\n        @current-change=\"handleCurrentChange\"\n        background\n        layout=\"prev, pager, next\"\n        :total=\"orderCount\"\n        :page-size=\"pageSize\"\n      ></el-pagination>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { client } from 'ontology-dapi'\n\nexport default {\n  data() {\n    return {\n      tableData: [],\n      accountid: '',\n      orderCount: 0,\n      pageSize: 2,\n      pageNum: 1\n    }\n  },\n  methods: {\n    async toShip(data, value) {\n      console.log(data)\n      // 构造数据\n      let operation = 'sendEncMessage'\n      // 构造args\n      let exchange_id = data.orderId     //   ByteArray\n      console.log(exchange_id)\n\n      let str = value   // 发货的数据\n      str = client.api.utils.strToHex(str)\n      let message_list = [\n        {\n          type: 'ByteArray',\n          value: str\n        }\n      ]\n\n      let args = [\n        {\n          type: 'ByteArray',\n          value: exchange_id\n        },\n        {\n          type: 'Array',\n          value: message_list\n        }\n      ]\n      let params = {\n        operation,\n        args\n      }\n      try {\n        const result = await this.$store.dispatch('dapiInvoke', params)\n        console.log(result)\n        if (result && result.transaction) {\n          this.getSellOrder()\n          this.$message({\n            message: '发货成功！',\n            type: 'success',\n            center: true,\n            duration: 2000\n          });\n        } else {\n          this.$message({\n            message: '发货失败，请重试！',\n            type: 'error',\n            center: true,\n            duration: 2000\n          })\n        }\n      } catch (error) {\n        this.$message({\n          message: '发货失败，请重试！',\n          type: 'error',\n          center: true,\n          duration: 2000\n        })\n      }\n    },\n    indexMethod(index) {\n      return (this.pageNum - 1) * this.pageSize + index + 1\n    },\n    async getSellOrder() {\n      try {\n        let res = await this.$http.get(`http://192.168.50.96:10335/api/v1/data-dealer/tools/orders/1?ontid=did:ont:${this.accountid}&pageNum=${this.pageNum}&pageSize=${this.pageSize}`)\n        console.log('sellerorder', res)\n        if (res.status === 200 && res.data.msg === 'SUCCESS') {\n          this.tableData = res.data.result.list\n          this.orderCount = res.data.result.total\n        }\n      } catch (error) {\n        this.tableData = []\n        console.log(error)\n      }\n    },\n    async collectMoney(data) {\n      // 构造数据\n      let operation = 'receiveToken'\n      // 构造args\n      let exchange_id = data.orderId\n      let args = [\n        {\n          type: 'ByteArray',\n          value: exchange_id\n        }\n      ]\n      let params = {\n        operation,\n        args\n      }\n      console.log(params)\n      try {\n        const result = await this.$store.dispatch('dapiInvoke', params)\n        console.log('result', result)\n\n        if (result && result.transaction) {\n          this.getSellOrder()\n          this.$message({\n            message: '收钱成功！',\n            type: 'success',\n            center: true,\n            duration: 2000\n          });\n        } else {\n          this.$message({\n            message: '收钱失败，请重试！',\n            type: 'error',\n            center: true,\n            duration: 2000\n          })\n        }\n      } catch (error) {\n        this.$message({\n          message: '收钱失败，请重试！',\n          type: 'error',\n          center: true,\n          duration: 2000\n        })\n      }\n\n    },\n    handleCurrentChange(val) {\n      this.pageNum = val\n      this.getSellOrder()\n    },\n    openMsgBox(data) {\n      this.$prompt('请输入内容', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        inputPattern: /\\S/,\n        inputErrorMessage: '内容不能为空'\n      }).then(({ value }) => {\n        this.toShip(data, value)\n      }).catch(() => {\n      });\n    },\n    toAddData() {\n      this.$router.push({ path: 'addnewdata' })\n    }\n  },\n  async  mounted() {\n    this.accountid = await client.api.asset.getAccount()\n    console.log(this.accountid);\n    if (!this.accountid) {\n      return\n    }\n    this.getSellOrder()\n  },\n}\n</script>\n\n<style lang='less' scoped>\n.paginatio {\n  margin: 20px auto;\n}\n</style>\n"]}]}