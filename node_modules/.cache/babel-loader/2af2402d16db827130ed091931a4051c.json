{"remainingRequest":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/babel-loader/lib/index.js!/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ericyang/Desktop/Onchina_item/marketplace-web/src/components/CommodityDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/src/components/CommodityDetail.vue","mtime":1557219533459},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { client } from 'ontology-dapi';\nexport default {\n  data: function data() {\n    return {\n      signing: false,\n      detailList: {}\n    };\n  },\n  created: function created() {\n    console.log(this.$route.query.commodityId);\n    var id = this.$route.query.commodityId;\n    this.getDetail(id);\n  },\n  methods: {\n    toIndex: function toIndex() {\n      this.$router.push({\n        path: '/'\n      });\n    },\n    toBuy: function () {\n      var _toBuy = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var ontid, scriptHash, operation, gasPrice, gasLimit, requireIdentity, account, demander, provider, idxstr, token_address, id, data_list, price, price_list, wait_send_msg_time, args, result;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                ontid = sessionStorage.getItem('user_ontid');\n\n                if (ontid) {\n                  _context.next = 4;\n                  break;\n                }\n\n                this.$message({\n                  message: '请先登录，再购买！',\n                  type: 'error',\n                  center: true,\n                  duration: 2000\n                });\n                return _context.abrupt(\"return\");\n\n              case 4:\n                scriptHash = '472848200412d9a7abbb0ed0bfb568a47745e4ba';\n                operation = 'sendToken';\n                gasPrice = 500;\n                gasLimit = 30000;\n                requireIdentity = true; // 构造args\n\n                _context.next = 11;\n                return client.api.asset.getAccount();\n\n              case 11:\n                account = _context.sent;\n                console.log('account', account);\n                demander = account;\n                demander = client.api.utils.addressToHex(demander);\n                console.log(demander);\n                provider = this.detailList.ontid; /////////////////\n\n                idxstr = provider.lastIndexOf(':');\n                console.log(idxstr);\n                console.log('provider', provider);\n                provider = provider.substr(idxstr + 1);\n                console.log('provider', provider);\n                return _context.abrupt(\"return\");\n\n              case 40:\n                result = _context.sent;\n                console.log(result);\n\n                if (result && result.transaction) {\n                  this.$message({\n                    message: '购买成功！',\n                    type: 'success',\n                    center: true,\n                    duration: 2000\n                  });\n                  this.signing = false;\n                }\n\n                _context.next = 49;\n                break;\n\n              case 45:\n                _context.prev = 45;\n                _context.t0 = _context[\"catch\"](36);\n                this.$message({\n                  message: '购买失败，请重试！',\n                  type: 'error',\n                  center: true,\n                  duration: 2000\n                });\n                this.signing = false;\n\n              case 49:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[36, 45]]);\n      }));\n\n      function toBuy() {\n        return _toBuy.apply(this, arguments);\n      }\n\n      return toBuy;\n    }(),\n    getDetail: function () {\n      var _getDetail = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(id) {\n        var res;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return this.$http.get(\"http://192.168.50.96:8182/api/v1/dataset/\".concat(id));\n\n              case 3:\n                res = _context2.sent;\n\n                if (res.status === 200 && res.data.msg === 'SUCCESS') {\n                  this.detailList = res.data.result;\n                }\n\n                _context2.next = 10;\n                break;\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n\n      function getDetail(_x) {\n        return _getDetail.apply(this, arguments);\n      }\n\n      return getDetail;\n    }()\n  }\n};",{"version":3,"sources":["CommodityDetail.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"detail_box\">\n    <div style=\"overflow: hidden; margin-bottom: 20px;\">\n      <el-button @click=\"toIndex()\" type=\"primary\" plain style=\"float: right\">返回首页</el-button>\n    </div>\n    <div class=\"item_box\">\n      <div class=\"item\">\n        <p>标签:</p>\n        <el-tag v-for=\"(item, idx) in detailList.tagValue\" :key=\"idx\">{{item}}</el-tag>\n      </div>\n      <div class=\"item\">\n        <p>币种:</p>\n        {{detailList.coin}}\n      </div>\n      <div class=\"item\">\n        <p>价格:</p>\n        {{detailList.price}}\n      </div>\n      <div class=\"item\">\n        <p>创建时间:</p>\n        {{detailList.createTime}}\n      </div>\n    </div>\n    <el-button type=\"success\" :disabled=\"signing\" @click=\"toBuy()\" round>立即购买</el-button>\n  </div>\n</template>\n\n<script>\nimport { client } from 'ontology-dapi'\n\nexport default {\n  data() {\n    return {\n      signing: false,\n      detailList: {}\n    }\n  },\n  created() {\n    console.log(this.$route.query.commodityId)\n    let id = this.$route.query.commodityId\n    this.getDetail(id)\n  },\n  methods: {\n    toIndex() {\n      this.$router.push({ path: '/' })\n    },\n    async toBuy() {\n      let ontid = sessionStorage.getItem('user_ontid')\n      if (!ontid) {\n        this.$message({\n          message: '请先登录，再购买！',\n          type: 'error',\n          center: true,\n          duration: 2000\n        });\n        return\n      }\n\n      let scriptHash = '472848200412d9a7abbb0ed0bfb568a47745e4ba'\n      let operation = 'sendToken'\n      let gasPrice = 500\n      let gasLimit = 30000\n      let requireIdentity = true\n\n      // 构造args\n      let account = await client.api.asset.getAccount()\n      console.log('account', account);\n      let demander = account\n      demander = client.api.utils.addressToHex(demander)\n      console.log(demander)\n      let provider = this.detailList.ontid      /////////////////\n      let idxstr = provider.lastIndexOf(':')\n      console.log(idxstr)\n      console.log('provider', provider)\n      provider = provider.substr(idxstr + 1)\n      console.log('provider', provider)\n      return\n      provider = client.api.utils.addressToHex(provider)\n      console.log(provider)\n      let token_address = '0000000000000000000000000000000000000002'\n      let id = this.$route.query.commodityId\n      id = client.api.utils.strToHex(id)\n      console.log('id', id)\n      let data_list = [\n        {\n          type: 'ByteArray',\n          value: id\n        }\n      ]\n\n      let price = this.detailList.price\n      price = Number(price)\n      let price_list = [\n        {\n          type: 'Integer',\n          value: price\n        }\n      ]\n\n      let wait_send_msg_time = 60000\n\n      let args = [\n        {\n          type: 'ByteArray',\n          value: demander\n        },\n        {\n          type: 'ByteArray',\n          value: provider\n        },\n        {\n          type: 'ByteArray',\n          value: token_address\n        }, {\n          type: 'Array',\n          value: data_list\n        }, {\n          type: 'Array',\n          value: price_list\n        }, {\n          type: 'Integer',\n          value: wait_send_msg_time\n        },\n      ]\n      console.log(args)\n\n      try {\n        this.signing = true\n        const result = await client.api.smartContract.invoke({\n          scriptHash,\n          operation,\n          args,\n          gasPrice,\n          gasLimit,\n          requireIdentity\n        });\n        console.log(result)\n        if (result && result.transaction) {\n          this.$message({\n            message: '购买成功！',\n            type: 'success',\n            center: true,\n            duration: 2000\n          });\n          this.signing = false\n        }\n\n      } catch (error) {\n        this.$message({\n          message: '购买失败，请重试！',\n          type: 'error',\n          center: true,\n          duration: 2000\n        });\n        this.signing = false\n      }\n    },\n    async getDetail(id) {\n\n      try {\n        let res = await this.$http.get(`http://192.168.50.96:8182/api/v1/dataset/${id}`)\n        if (res.status === 200 && res.data.msg === 'SUCCESS') {\n          this.detailList = res.data.result\n        }\n      } catch (error) {\n        console.log(error)\n      }\n    }\n  },\n}\n</script>\n\n<style lang='less' scoped>\n.detail_box {\n  width: 80%;\n  margin: 40px auto;\n  .item_box {\n    width: 50%;\n    margin: 0 auto;\n    text-align: left;\n    margin-bottom: 20px;\n    .item {\n      p {\n        font-size: 22px;\n        color: #000;\n        line-height: 28px;\n      }\n      span.el-tag {\n        margin-right: 20px;\n      }\n    }\n  }\n}\n</style>\n"],"sourceRoot":"src/components"}]}