{"remainingRequest":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/babel-loader/lib/index.js!/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ericyang/Desktop/Onchina_item/marketplace-web/src/components/Seller.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/src/components/Seller.vue","mtime":1557224963625},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { client } from 'ontology-dapi';\nexport default {\n  data: function data() {\n    return {\n      tableData: [],\n      accountid: ''\n    };\n  },\n  methods: {\n    toShip: function () {\n      var _toShip = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(data) {\n        var scriptHash, operation, gasPrice, gasLimit, requireIdentity, exchange_id, str, message_list, args, result;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(data); // 构造数据\n\n                scriptHash = '472848200412d9a7abbb0ed0bfb568a47745e4ba';\n                operation = 'sendEncMessage';\n                gasPrice = 500;\n                gasLimit = 30000;\n                requireIdentity = true; // 构造args\n\n                exchange_id = data.order_id; //   ByteArray\n\n                console.log(exchange_id); //   exchange_id = client.api.utils.addressToHex(exchange_id)\n\n                str = 'lijie';\n                str = client.api.utils.strToHex(str);\n                message_list = [{\n                  type: 'ByteArray',\n                  value: str\n                }];\n                args = [{\n                  type: 'ByteArray',\n                  value: exchange_id\n                }, {\n                  type: 'Array',\n                  value: message_list\n                }];\n                _context.next = 14;\n                return client.api.smartContract.invoke({\n                  scriptHash: scriptHash,\n                  operation: operation,\n                  args: args,\n                  gasPrice: gasPrice,\n                  gasLimit: gasLimit,\n                  requireIdentity: requireIdentity\n                });\n\n              case 14:\n                result = _context.sent;\n                console.log(result);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function toShip(_x) {\n        return _toShip.apply(this, arguments);\n      }\n\n      return toShip;\n    }(),\n    indexMethod: function indexMethod(index) {\n      return index + 1;\n    },\n    getSellOrder: function () {\n      var _getSellOrder = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return this.$http.get(\"http://192.168.50.96:10335/api/v1/data-dealer/tools/orders/1?ontid=did:ont:\".concat(this.accountid));\n\n              case 3:\n                res = _context2.sent;\n                console.log('sellerorder', res);\n\n                if (res.status === 200 && res.data.desc === 'SUCCESS') {\n                  this.tableData = res.data.result;\n                }\n\n                _context2.next = 12;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                this.tableData = [];\n                console.log(_context2.t0);\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 8]]);\n      }));\n\n      function getSellOrder() {\n        return _getSellOrder.apply(this, arguments);\n      }\n\n      return getSellOrder;\n    }(),\n    collectMoney: function () {\n      var _collectMoney = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(data) {\n        var scriptHash, operation, gasPrice, gasLimit, requireIdentity, exchange_id, args, result;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // 构造数据\n                scriptHash = '472848200412d9a7abbb0ed0bfb568a47745e4ba';\n                operation = 'receiveToken';\n                gasPrice = 500;\n                gasLimit = 30000;\n                requireIdentity = true; // 构造args\n\n                exchange_id = data.order_id;\n                args = [{\n                  type: 'ByteArray',\n                  value: exchange_id\n                }];\n                _context3.next = 9;\n                return client.api.smartContract.invoke({\n                  scriptHash: scriptHash,\n                  operation: operation,\n                  args: args,\n                  gasPrice: gasPrice,\n                  gasLimit: gasLimit,\n                  requireIdentity: requireIdentity\n                });\n\n              case 9:\n                result = _context3.sent;\n                console.log(result);\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function collectMoney(_x2) {\n        return _collectMoney.apply(this, arguments);\n      }\n\n      return collectMoney;\n    }()\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee4() {\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return client.api.asset.getAccount();\n\n            case 2:\n              this.accountid = _context4.sent;\n              console.log(this.accountid);\n\n              if (this.accountid) {\n                _context4.next = 6;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 6:\n              this.getSellOrder();\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }()\n};",{"version":3,"sources":["Seller.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <el-table border :data=\"tableData\" style=\"width: 100%\">\n      <el-table-column type=\"index\" :index=\"indexMethod\" align=\"center\"></el-table-column>\n      <el-table-column prop=\"data_demander\" label=\"买家\" style=\"width: 20%\" align=\"center\"></el-table-column>\n      <el-table-column prop=\"order_id\" label=\"订单号\" width=\"260\" align=\"center\"></el-table-column>\n      <el-table-column label=\"订单状态\" align=\"center\" width=\"180\">\n        <template slot-scope=\"scope\">\n          <el-tag size=\"medium\" v-if=\"scope.row.state === 'boughtOnchain'\">待发货</el-tag>\n          <el-tag\n            size=\"medium\"\n            type=\"success\"\n            v-else-if=\"scope.row.state === 'deliveredOnchain'\"\n          >已发货</el-tag>\n          <el-tag\n            size=\"medium\"\n            type=\"warning\"\n            v-else-if=\"scope.row.state === 'buyerRecvMsgOnchain'\"\n          >买家已收货</el-tag>\n          <el-tag\n            size=\"medium\"\n            type=\"danger\"\n            v-else-if=\"scope.row.state === 'sellerRecvTokenOnchain'\"\n          >已收钱</el-tag>\n          <el-tag size=\"medium\" type=\"info\" v-else>订单已取消</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"buy_date\" label=\"购买日期\" width=\"180\" align=\"center\"></el-table-column>\n      <el-table-column label=\"操作\" width=\"180\" align=\"center\">\n        <template slot-scope=\"scope\">\n          <el-button\n            @click=\"toShip(scope.row)\"\n            type=\"primary\"\n            v-if=\"scope.row.state === 'boughtOnchain'\"\n          >立即发货</el-button>\n          <el-button\n            @click=\"collectMoney(scope.row)\"\n            type=\"primary\"\n            v-else-if=\"scope.row.state === 'deliveredOnchain'\"\n          >收钱</el-button>\n          <el-tag\n            size=\"medium\"\n            type=\"info\"\n            v-else-if=\"scope.row.state === 'sellerRecvTokenOnchain'\"\n          >订单已完成</el-tag>\n          <el-tag size=\"medium\" type=\"info\" v-else>订单已取消</el-tag>\n        </template>\n      </el-table-column>\n    </el-table>\n  </div>\n</template>\n\n<script>\nimport { client } from 'ontology-dapi'\n\nexport default {\n  data() {\n    return {\n      tableData: [],\n      accountid: ''\n    }\n  },\n  methods: {\n    async toShip(data) {\n      console.log(data)\n      // 构造数据\n      let scriptHash = '472848200412d9a7abbb0ed0bfb568a47745e4ba'\n      let operation = 'sendEncMessage'\n      let gasPrice = 500\n      let gasLimit = 30000\n      let requireIdentity = true\n\n      // 构造args\n      let exchange_id = data.order_id     //   ByteArray\n      console.log(exchange_id)\n      //   exchange_id = client.api.utils.addressToHex(exchange_id)\n\n      let str = 'lijie'\n      str = client.api.utils.strToHex(str)\n      let message_list = [\n        {\n          type: 'ByteArray',\n          value: str\n        }\n      ]\n\n      let args = [\n        {\n          type: 'ByteArray',\n          value: exchange_id\n        },\n        {\n          type: 'Array',\n          value: message_list\n        }\n      ]\n\n\n      const result = await client.api.smartContract.invoke({\n        scriptHash,\n        operation,\n        args,\n        gasPrice,\n        gasLimit,\n        requireIdentity\n      });\n      console.log(result)\n    },\n    indexMethod(index) {\n      return index + 1\n    },\n    async getSellOrder() {\n      try {\n        let res = await this.$http.get(`http://192.168.50.96:10335/api/v1/data-dealer/tools/orders/1?ontid=did:ont:${this.accountid}`)\n        console.log('sellerorder', res)\n        if (res.status === 200 && res.data.desc === 'SUCCESS') {\n          this.tableData = res.data.result\n        }\n      } catch (error) {\n        this.tableData = []\n        console.log(error)\n      }\n    },\n    async collectMoney(data) {\n      // 构造数据\n      let scriptHash = '472848200412d9a7abbb0ed0bfb568a47745e4ba'\n      let operation = 'receiveToken'\n      let gasPrice = 500\n      let gasLimit = 30000\n      let requireIdentity = true\n\n      // 构造args\n      let exchange_id = data.order_id\n      let args = [\n        {\n          type: 'ByteArray',\n          value: exchange_id\n        }\n      ]\n\n      const result = await client.api.smartContract.invoke({\n        scriptHash,\n        operation,\n        args,\n        gasPrice,\n        gasLimit,\n        requireIdentity\n      });\n      console.log(result)\n    }\n  },\n  async  mounted() {\n    this.accountid = await client.api.asset.getAccount()\n    console.log(this.accountid);\n    if (!this.accountid) {\n      return\n    }\n    this.getSellOrder()\n  },\n}\n</script>\n\n<style>\n</style>\n"],"sourceRoot":"src/components"}]}