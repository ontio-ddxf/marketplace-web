"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
function toUpperCamelCase(value) {
    return value[0].toUpperCase() + value.substr(1).replace(/[\-|_\.][a-z]/g, (m) => m[1].toUpperCase());
}
exports.toUpperCamelCase = toUpperCamelCase;
function lowerFirstChar(value) {
    return value[0].toLowerCase() + value.substr(1);
}
exports.lowerFirstChar = lowerFirstChar;
function filterUnique(e, i, a) {
    return a.indexOf(e) === i;
}
exports.filterUnique = filterUnique;
function workMap(map, callback) {
    if (map && Object.getOwnPropertyNames(map).length) {
        for (const key in map)
            callback(map[key], key);
        return true;
    }
    return false;
}
exports.workMap = workMap;
function modifyMap(map, callback) {
    if (map && Object.getOwnPropertyNames(map).length) {
        for (const key in map)
            map[key] = callback(map[key], key);
        return true;
    }
    return false;
}
exports.modifyMap = modifyMap;
function workArray(list, callback) {
    if (list && list.length) {
        list.forEach(callback);
        return true;
    }
    return false;
}
exports.workArray = workArray;
function modifyArray(list, callback) {
    if (list && list.length) {
        list.forEach((e, i) => list[i] = callback(e, i));
        return true;
    }
    return false;
}
exports.modifyArray = modifyArray;
function readJsonFile(file) {
    try {
        const value = fs.readFileSync(file, { encoding: 'utf-8' });
        return JSON.parse(value);
    }
    catch (e) {
        console.error('Error reading ' + file + ': ', e);
        throw e;
    }
}
exports.readJsonFile = readJsonFile;
//# sourceMappingURL=utils.js.map