"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class CodeWriter {
    constructor() {
        this.lines = [];
        this.lastIsEmpty = true;
        this.commentLines = 0;
        this.indentation = '';
    }
    begin(line) {
        if (this.commentLines > 0) {
            if (this.lastIsEmpty)
                this.lines.pop();
            this.lines.push(this.indentation + ' */');
            this.commentLines = 0;
        }
        this.lines.push(this.indentation + line);
        this.indentation += '    ';
        this.lastIsEmpty = false;
    }
    end(line) {
        if (this.commentLines > 0)
            throw new Error('Comment before block end');
        if (this.lastIsEmpty) {
            this.lines.pop();
            this.lastIsEmpty = false;
        }
        if (this.indentation.length < 4)
            throw new Error('Indentation too low');
        this.indentation = this.indentation.substr(0, this.indentation.length - 4);
        this.lines.push(this.indentation + line);
        this.emptyLine();
    }
    comment(line) {
        if (!line)
            return;
        if (this.commentLines === 0) {
            if (!this.lastIsEmpty)
                this.lines.push('');
            this.lines.push(this.indentation + '/**');
        }
        this.lines.push(this.indentation + ' * ' + line);
        this.commentLines++;
        this.lastIsEmpty = false;
    }
    code(line) {
        if (this.commentLines > 0) {
            if (this.lastIsEmpty) {
                this.lines.pop();
                this.lastIsEmpty = false;
            }
            this.lines.push(this.indentation + ' */');
            this.commentLines = 0;
        }
        this.lines.push(this.indentation + line);
        this.lastIsEmpty = false;
    }
    emptyLine() {
        if (!this.lastIsEmpty) {
            if (this.commentLines > 0)
                this.lines.push(this.indentation + ' *');
            else
                this.lines.push('');
            this.lastIsEmpty = true;
        }
    }
    toString() {
        return this.lines.join('\n');
    }
}
exports.CodeWriter = CodeWriter;
//# sourceMappingURL=CodeWriter.js.map