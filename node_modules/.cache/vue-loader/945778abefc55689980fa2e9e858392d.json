{"remainingRequest":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ericyang/Desktop/Onchina_item/marketplace-web/src/components/CommodityDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/src/components/CommodityDetail.vue","mtime":1557373210528},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ericyang/Desktop/Onchina_item/marketplace-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { client } from 'ontology-dapi'\n\nexport default {\n  data() {\n    return {\n      signing: false,\n      detailList: {}\n    }\n  },\n  created() {\n    console.log(this.$route.query.commodityId)\n    let id = this.$route.query.commodityId\n    this.getDetail(id)\n  },\n  methods: {\n    toIndex() {\n      this.$router.push({ path: '/' })\n    },\n    async toBuy() {\n      let ontid = sessionStorage.getItem('user_ontid')\n      if (!ontid) {\n        this.$message({\n          message: '请先登录，再购买！',\n          type: 'error',\n          center: true,\n          duration: 2000\n        });\n        return\n      }\n\n      let operation = 'sendToken'\n\n      // 构造args\n      let account = await client.api.asset.getAccount()\n      console.log('account', account);\n      let demander = account\n      demander = client.api.utils.addressToHex(demander)\n      console.log(demander)\n      let provider = this.detailList.ontid\n      let idxstr = provider.lastIndexOf(':')\n      console.log(idxstr)\n      console.log('provider', provider)\n      provider = provider.substr(idxstr + 1)\n      console.log('provider', provider)\n      provider = client.api.utils.addressToHex(provider)\n      console.log(provider)\n      let token_address = this.$store.state.token_address\n      console.log(this.$store.state.token_address)\n      let id = this.$route.query.commodityId\n      id = client.api.utils.strToHex(id)\n      console.log('id', id)\n      let data_list = [\n        {\n          type: 'ByteArray',\n          value: id\n        }\n      ]\n\n      let price = this.detailList.price\n      price = Number(price)\n      let price_list = [\n        {\n          type: 'Integer',\n          value: price\n        }\n      ]\n\n      let wait_send_msg_time = 120\n\n      let args = [\n        {\n          type: 'ByteArray',\n          value: demander\n        },\n        {\n          type: 'ByteArray',\n          value: provider\n        },\n        {\n          type: 'ByteArray',\n          value: token_address\n        }, {\n          type: 'Array',\n          value: data_list\n        }, {\n          type: 'Array',\n          value: price_list\n        }, {\n          type: 'Integer',\n          value: wait_send_msg_time\n        },\n      ]\n      let params = {\n        operation,\n        args\n      }\n\n      try {\n        this.signing = true\n        const result = await this.$store.dispatch('dapiInvoke', params)\n        console.log('result', result)\n        if (result && result.transaction) {\n          this.$message({\n            message: '购买成功！',\n            type: 'success',\n            center: true,\n            duration: 2000\n          });\n          this.signing = false\n        } else {\n          this.$message({\n            message: '购买失败，请重试！',\n            type: 'error',\n            center: true,\n            duration: 2000\n          });\n          this.signing = false\n        }\n\n      } catch (error) {\n        this.$message({\n          message: '购买失败，请重试！',\n          type: 'error',\n          center: true,\n          duration: 2000\n        });\n        this.signing = false\n      }\n    },\n    async getDetail(id) {\n\n      try {\n        let res = await this.$http.get(`http://192.168.50.96:8182/api/v1/dataset/${id}`)\n        if (res.status === 200 && res.data.msg === 'SUCCESS') {\n          this.detailList = res.data.result\n        }\n      } catch (error) {\n        console.log(error)\n      }\n    }\n  },\n}\n",{"version":3,"sources":["CommodityDetail.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CommodityDetail.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"detail_box\">\n    <div style=\"overflow: hidden; margin-bottom: 20px;\">\n      <el-button @click=\"toIndex()\" type=\"primary\" plain style=\"float: right\">返回首页</el-button>\n    </div>\n    <div class=\"item_box\">\n      <div class=\"item\">\n        <p>标签:</p>\n        <el-tag v-for=\"(item, idx) in detailList.tagValue\" :key=\"idx\">{{item}}</el-tag>\n      </div>\n      <div class=\"item\">\n        <p>币种:</p>\n        {{detailList.coin}}\n      </div>\n      <div class=\"item\">\n        <p>价格:</p>\n        {{detailList.price}}\n      </div>\n      <div class=\"item\">\n        <p>创建时间:</p>\n        {{detailList.createTime}}\n      </div>\n    </div>\n    <el-button type=\"success\" :disabled=\"signing\" @click=\"toBuy()\" round>立即购买</el-button>\n  </div>\n</template>\n\n<script>\nimport { client } from 'ontology-dapi'\n\nexport default {\n  data() {\n    return {\n      signing: false,\n      detailList: {}\n    }\n  },\n  created() {\n    console.log(this.$route.query.commodityId)\n    let id = this.$route.query.commodityId\n    this.getDetail(id)\n  },\n  methods: {\n    toIndex() {\n      this.$router.push({ path: '/' })\n    },\n    async toBuy() {\n      let ontid = sessionStorage.getItem('user_ontid')\n      if (!ontid) {\n        this.$message({\n          message: '请先登录，再购买！',\n          type: 'error',\n          center: true,\n          duration: 2000\n        });\n        return\n      }\n\n      let operation = 'sendToken'\n\n      // 构造args\n      let account = await client.api.asset.getAccount()\n      console.log('account', account);\n      let demander = account\n      demander = client.api.utils.addressToHex(demander)\n      console.log(demander)\n      let provider = this.detailList.ontid\n      let idxstr = provider.lastIndexOf(':')\n      console.log(idxstr)\n      console.log('provider', provider)\n      provider = provider.substr(idxstr + 1)\n      console.log('provider', provider)\n      provider = client.api.utils.addressToHex(provider)\n      console.log(provider)\n      let token_address = this.$store.state.token_address\n      console.log(this.$store.state.token_address)\n      let id = this.$route.query.commodityId\n      id = client.api.utils.strToHex(id)\n      console.log('id', id)\n      let data_list = [\n        {\n          type: 'ByteArray',\n          value: id\n        }\n      ]\n\n      let price = this.detailList.price\n      price = Number(price)\n      let price_list = [\n        {\n          type: 'Integer',\n          value: price\n        }\n      ]\n\n      let wait_send_msg_time = 120\n\n      let args = [\n        {\n          type: 'ByteArray',\n          value: demander\n        },\n        {\n          type: 'ByteArray',\n          value: provider\n        },\n        {\n          type: 'ByteArray',\n          value: token_address\n        }, {\n          type: 'Array',\n          value: data_list\n        }, {\n          type: 'Array',\n          value: price_list\n        }, {\n          type: 'Integer',\n          value: wait_send_msg_time\n        },\n      ]\n      let params = {\n        operation,\n        args\n      }\n\n      try {\n        this.signing = true\n        const result = await this.$store.dispatch('dapiInvoke', params)\n        console.log('result', result)\n        if (result && result.transaction) {\n          this.$message({\n            message: '购买成功！',\n            type: 'success',\n            center: true,\n            duration: 2000\n          });\n          this.signing = false\n        } else {\n          this.$message({\n            message: '购买失败，请重试！',\n            type: 'error',\n            center: true,\n            duration: 2000\n          });\n          this.signing = false\n        }\n\n      } catch (error) {\n        this.$message({\n          message: '购买失败，请重试！',\n          type: 'error',\n          center: true,\n          duration: 2000\n        });\n        this.signing = false\n      }\n    },\n    async getDetail(id) {\n\n      try {\n        let res = await this.$http.get(`http://192.168.50.96:8182/api/v1/dataset/${id}`)\n        if (res.status === 200 && res.data.msg === 'SUCCESS') {\n          this.detailList = res.data.result\n        }\n      } catch (error) {\n        console.log(error)\n      }\n    }\n  },\n}\n</script>\n\n<style lang='less' scoped>\n.detail_box {\n  width: 80%;\n  margin: 40px auto;\n  .item_box {\n    width: 50%;\n    margin: 0 auto;\n    text-align: left;\n    margin-bottom: 20px;\n    .item {\n      p {\n        font-size: 22px;\n        color: #000;\n        line-height: 28px;\n      }\n      span.el-tag {\n        margin-right: 20px;\n      }\n    }\n  }\n}\n</style>\n"]}]}